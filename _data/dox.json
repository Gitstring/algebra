[
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} data",
        "name": "data",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} data</p>"
      },
      {
        "type": "param",
        "string": "{Function} check",
        "name": "check",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} check</p>"
      }
    ],
    "description": {
      "full": "<p>Abstract element</p><p>It has a <em>data</em> attribute that can contain anything, validated by its <em>check</em>.</p>",
      "summary": "<p>Abstract element</p>",
      "body": "<p>It has a <em>data</em> attribute that can contain anything, validated by its <em>check</em>.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2,
    "codeStart": 11,
    "code": "function Element (data, check) {\n  if (typeof data === 'undefined')\n    throw new TypeError('Undefined data')\n\n  if (check(data))\n    this.data = data\n  else\n    throw new TypeError('Invalid data = ' + data)\n}\n\nfunction valueOf () {\n  return this.data\n}\n\nElement.prototype.valueOf = valueOf\n\nmodule.exports = Element\n\n\nvar determinant               = require('laplace-determinant'),\n    inherits                  = require('inherits'),\n    itemsPool                 = require('./itemsPool'),\n    isInteger                 = require('is-integer'),\n    matrixToArrayIndex        = require('./matrixToArrayIndex'),\n    rowByColumnMultiplication = require('./rowByColumnMultiplication'),\n    toData                    = require('./toData'),\n    VectorSpace               = require('./VectorSpace')",
    "ctx": {
      "type": "function",
      "name": "Element",
      "string": "Element()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar\n",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "returns",
        "string": "{Function} anonymous with signature (numRows[, numCols])",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>anonymous with signature (numRows[, numCols])</p>"
      }
    ],
    "description": {
      "full": "<p>Space of m x n matrices</p><pre><code>var R = algebra.R\n\nvar R2x2 = algebra.MatrixSpace(R)(2)\n</code></pre>",
      "summary": "<p>Space of m x n matrices</p>",
      "body": "<pre><code>var R = algebra.R\n\nvar R2x2 = algebra.MatrixSpace(R)(2)\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 39,
    "codeStart": 53,
    "code": "function MatrixSpace (Scalar) {",
    "ctx": {
      "type": "function",
      "name": "MatrixSpace",
      "string": "MatrixSpace()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Number} numRows",
        "name": "numRows",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numRows</p>"
      },
      {
        "type": "param",
        "string": "{Number} [numCols] defaults to a square matrix.\n",
        "name": "[numCols]",
        "description": "<p>defaults to a square matrix. </p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "{Class} Matrix",
        "types": [
          "Class"
        ],
        "typesDescription": "<a href=\"Class.html\">Class</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Matrix</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 55,
    "codeStart": 64,
    "code": "return function (numRows, numCols) {\n\n  function createIdentity (scalarZero, scalarOne, rank) {\n    var identity = []\n\n    for (var i = 0; i < rank; i++)\n      for (var j = 0; j < rank; j++)\n        if (i === j)\n          identity.push(scalarOne)\n        else\n          identity.push(scalarZero)\n\n   return identity\n  }\n\n  // numCols defaults to numRows\n  if (typeof numCols === 'undefined')\n    numCols = numRows\n\n  var dimension = numRows * numCols,\n      indices   = [numRows, numCols],\n      isSquare  = (numRows === numCols)",
    "ctx": {
      "type": "function",
      "name": "",
      "string": "()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n\nRow by column multiplication at right side",
        "visibility": "private",
        "html": "<p>private</p><p>Row by column multiplication at right side</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 87,
    "codeStart": 93,
    "code": "function staticRightMultiplication (leftNumRows, leftNumCols, left, right) {\n  // Multiplication is possible only if\n  //\n  //     left num cols = right num rows\n  //\n  // Since\n  //\n  //     right num rows * right num cols = rightData.length\n  //\n  // it is possible to compute right num cols and the right matrix is square if\n  //\n  //     right num rows = right num cols\n  //\n\n  // leftNumRows, leftNumCols = rightNumRows, rightNumCols\n\n  var leftData  = toData(left),\n      rightData = toData(right),\n      rightNumCols = rightData.length / leftNumCols\n\n  // Check if rightNumCols results to be an integer: it means matrices can be multiplied.\n  if (! isInteger(rightNumCols))\n    throw new TypeError('left num cols != right num rows')\n\n  return rowByColumnMultiplication(Scalar, leftData, leftNumRows, rightData, rightNumCols)\n}\n\n// MatrixSpace mxn is a VectorSpace with dim=m*n\nvar Vector = VectorSpace(Scalar)(dimension)",
    "ctx": {
      "type": "function",
      "name": "staticRightMultiplication",
      "string": "staticRightMultiplication()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} data",
        "name": "data",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} data</p>"
      }
    ],
    "description": {
      "full": "<p>Inherits from <a href=\"#element\">Element</a>.</p><pre><code>var MatrixSpace = algebra.MatrixSpace,\n    R           = algebra.Real\n\nvar R3x2 = MatrixSpace(R)(3, 2)\n\nvar matrix = R3x2([1, 2,\n                   3, 4,\n                   5, 6])\n</code></pre>",
      "summary": "<p>Inherits from <a href=\"#element\">Element</a>.</p>",
      "body": "<pre><code>var MatrixSpace = algebra.MatrixSpace,\n    R           = algebra.Real\n\nvar R3x2 = MatrixSpace(R)(3, 2)\n\nvar matrix = R3x2([1, 2,\n                   3, 4,\n                   5, 6])\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 123,
    "codeStart": 140,
    "code": "function Matrix (data) {\n  Vector.call(this, data)\n\n  this.numCols = numCols\n  this.numRows = numRows\n\n  Object.defineProperties(this, {\n    'numCols': { writable: false, value: numCols },\n    'numRows': { writable: false, value: numRows }\n  })\n\n  function matrixDeterminant () {\n    var det = determinant(data, Scalar, numRows)\n\n    return new Scalar(det)\n  }\n\n  if (isSquare) {\n    Object.defineProperty(this, 'determinant', {get: matrixDeterminant})\n  }\n}\n\ninherits(Matrix, Vector)",
    "ctx": {
      "type": "function",
      "name": "Matrix",
      "string": "Matrix()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{right}\n",
        "name": "",
        "description": "",
        "types": [
          "right"
        ],
        "typesDescription": "<a href=\"right.html\">right</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{right}</p>"
      },
      {
        "type": "returns",
        "string": "{Array} data",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>data</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 164,
    "codeStart": 173,
    "code": "function rightMultiplication (right) {\n  var left        = this.data,\n      leftNumCols = this.numCols,\n      leftNumRows = this.numRows,\n      rightData   = toData(right)\n\n  var data = staticRightMultiplication(leftNumRows, leftNumCols, left, right)\n\n  // If staticRightMultiplication does not throw it means that matrices can be multiplied.\n  var rightNumCols = rightData.length / leftNumCols,\n      rightNumRows = leftNumCols\n\n  var leftIsVector  = (leftNumRows === 1),\n      rightIsVector = (rightNumCols === 1)\n\n  if (leftIsVector && rightIsVector)\n    return new Scalar(data[0])\n\n  var VectorSpace = itemsPool.getVectorSpace()\n\n  if (leftIsVector) {\n    var LeftVector = VectorSpace(Scalar)(rightNumCols)\n\n    return new LeftVector(data)\n  }\n\n  if (rightIsVector) {\n    var RightVector = VectorSpace(Scalar)(leftNumRows)\n\n    return new RightVector(data)\n  }\n\n  var MatrixSpace = itemsPool.getMatrixSpace()\n\n  var Matrix = MatrixSpace(Scalar)(rightNumRows, rightNumCols)\n\n  return new Matrix(data)\n}\n\nMatrix.prototype.multiplication = rightMultiplication\n\n// Static attributes.\n\nif (isSquare) {\n  // TODO rank should be calculated depending on determinant\n  // if determinant is zero, rank < numRows, but this needs sub-matrix function\n  // which is in laplace-determinant package and should be placed in its own package\n  var rank = numRows\n\n  var identity = createIdentity(Scalar.zero, Scalar.one, rank)\n\n  Object.defineProperty(Matrix, 'identity', {\n    writable: false,\n    value: identity\n  })\n}\n\nObject.defineProperties(Matrix, {\n  'isSquare': { writable: false, value: isSquare },\n  'numCols': { writable: false, value: numCols },\n  'numRows': { writable: false, value: numRows },\n  'zero': { writable: false, value: Vector.zero }\n})",
    "ctx": {
      "type": "function",
      "name": "rightMultiplication",
      "string": "rightMultiplication()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{numRows}",
        "name": "",
        "description": "",
        "types": [
          "numRows"
        ],
        "typesDescription": "<a href=\"numRows.html\">numRows</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{numRows}</p>"
      },
      {
        "type": "param",
        "string": "{numCols}",
        "name": "",
        "description": "",
        "types": [
          "numCols"
        ],
        "typesDescription": "<a href=\"numCols.html\">numCols</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{numCols}</p>"
      },
      {
        "type": "param",
        "string": "{Object|Array} matrix\n",
        "name": "matrix",
        "description": "",
        "types": [
          "Object",
          "Array"
        ],
        "typesDescription": "<code>Object</code>|<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object|Array} matrix</p>"
      },
      {
        "type": "returns",
        "string": "{Array} transposedData",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>transposedData</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 237,
    "codeStart": 248,
    "code": "function transpose (numRows, numCols, matrix) {\n  var data           = toData(matrix),\n      transposedData = []\n\n  for (var i = 0; i < numRows; i++)\n    for (var j = 0; j < numCols; j++) {\n      transposedData[matrixToArrayIndex(j, i, numRows)] = data[matrixToArrayIndex(i, j, numCols)]\n    }\n\n  return transposedData\n}",
    "ctx": {
      "type": "function",
      "name": "transpose",
      "string": "transpose()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "returns",
        "string": "{Object} transposed matrix",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>transposed matrix</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 260,
    "codeStart": 267,
    "code": "function matrixTransposition () {\n  var data    = this.data,\n      numCols = this.numCols,\n      numRows = this.numRows\n\n  var transposedData = transpose(numRows, numCols, data)\n\n                                          // +--------+-- Transposed indices here.\n                                          // ↓        ↓\n  var TransposedMatrix = MatrixSpace(Scalar)(numCols, numRows)\n  return new TransposedMatrix(transposedData)\n}\n\nMatrix.prototype.transpose = matrixTransposition\n\n// Static operators.\n\nMatrix.addition       = Vector.addition\nMatrix.multiplication = staticRightMultiplication.bind(null, numRows, numCols)\nMatrix.negation       = Vector.negation\nMatrix.subtraction    = Vector.subtraction\nMatrix.transpose      = transpose.bind(null, numRows, numCols)\n\n// Aliases.\n\nMatrix.add = Matrix.addition\nMatrix.mul = Matrix.multiplication\nMatrix.neg = Matrix.negation\nMatrix.sub = Matrix.subtraction\n\nMatrix.prototype.mul            = rightMultiplication\n\nMatrix.prototype.tr = matrixTransposition\nMatrix.prototype.t  = matrixTransposition\n\nMatrix.tr = Matrix.transpose\n\nreturn Matrix\n  }\n}\n\nitemsPool.setMatrixSpace(MatrixSpace)\n\nmodule.exports = MatrixSpace\n\n\nvar algebraGroup              = require('algebra-group'),\ncoerced                   = require('./coerced'),\ncomparison                = require('./comparison'),\nElement                   = require('./Element'),\ninherits                  = require('inherits'),\nitemsPool                 = require('./itemsPool'),\nmethod                    = require('./method'),\nrowByColumnMultiplication = require('./rowByColumnMultiplication.js'),\ntoData                    = require('./toData')\n\nvar nAryMethod  = method.nAry,\nunaryMethod = method.unary",
    "ctx": {
      "type": "function",
      "name": "matrixTransposition",
      "string": "matrixTransposition()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar class\n",
        "name": "Scalar",
        "description": "<p>class </p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "{Function} anonymous with signature (dimension)",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>anonymous with signature (dimension)</p>"
      }
    ],
    "description": {
      "full": "<p>Space of vectors</p><pre><code>var V = VectorSpace(R)(2)\n\nvar v = new V([1, 2])\n</code></pre>",
      "summary": "<p>Space of vectors</p>",
      "body": "<pre><code>var V = VectorSpace(R)(2)\n\nvar v = new V([1, 2])\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 326,
    "codeStart": 340,
    "code": "function VectorSpace (Scalar) {",
    "ctx": {
      "type": "function",
      "name": "VectorSpace",
      "string": "VectorSpace()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Number} dimension\n",
        "name": "dimension",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} dimension</p>"
      },
      {
        "type": "returns",
        "string": "{Constructor} Vector",
        "types": [
          "Constructor"
        ],
        "typesDescription": "<a href=\"Constructor.html\">Constructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Vector</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 342,
    "codeStart": 350,
    "code": "return function (dimension) {\n\n  function createZero (scalarZero, dimension) {\n    var vectorZero = []\n\n    for (var i = 0; i < dimension; i++)\n      vectorZero.push(scalarZero)\n\n   return vectorZero\n  }\n\n  var zero = createZero(Scalar.zero, dimension)\n\n  function _contains (a) {\n    if (a.length !== dimension) return false\n\n    for (var i = 0; i < dimension; i++)\n      if (! Scalar.contains(a[i]))\n        return false\n\n    return true\n  }\n\n  function _equality (a, b) {\n    for (var i = 0; i < dimension; i++)\n      if (! Scalar.equality(a[i], b[i]))\n        return false\n\n    return true\n  }\n\n  function _addition (a, b) {\n    var c = []\n\n    for (var i = 0; i < dimension; i++)\n      c.push(Scalar.addition(a[i], b[i]))\n\n    return c\n  }\n\n  function _negation (a) {\n    var b = []\n\n    for (var i = 0; i < dimension; i++)\n      b.push(Scalar.negation(a[i]))\n\n    return b\n  }\n\n  var g = algebraGroup({\n    identity       : zero,\n    contains       : _contains,\n    equality       : _equality,\n    compositionLaw : _addition,\n    inversion      : _negation\n  })\n\n  var addition    = coerced(g.addition),\n      contains    = coerced(g.contains),\n      disequality = coerced(g.disequality),\n      equality    = coerced(g.equality),\n      negation    = coerced(g.negation),\n      notContains = coerced(g.notContains),\n      subtraction = coerced(g.subtraction)",
    "ctx": {
      "type": "function",
      "name": "",
      "string": "()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} data",
        "name": "data",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} data</p>"
      }
    ],
    "description": {
      "full": "<p>Inherits from <a href=\"#element\">Element</a>.</p><pre><code>var VectorSpace = algebra.VectorSpace,\n    R           = algebra.Real\n\nvar R3 = VectorSpace(R)(3)\n\nvar vector = R3([1, 2, 6]\n</code></pre>",
      "summary": "<p>Inherits from <a href=\"#element\">Element</a>.</p>",
      "body": "<pre><code>var VectorSpace = algebra.VectorSpace,\n    R           = algebra.Real\n\nvar R3 = VectorSpace(R)(3)\n\nvar vector = R3([1, 2, 6]\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 415,
    "codeStart": 430,
    "code": "function Vector (data) {\n  Element.call(this, data, contains)",
    "ctx": {
      "type": "function",
      "name": "Vector",
      "string": "Vector()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "returns",
        "string": "{Scalar} result",
        "types": [
          "Scalar"
        ],
        "typesDescription": "<a href=\"Scalar.html\">Scalar</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>result</p>"
      }
    ],
    "description": {
      "full": "<p>Norm of a vector</p><p>Given v = (x1, x2, ... xN)</p><p>norm is defined as n = x1 <em> x1 + x2 </em> x2 + ... + xN * xN</p>",
      "summary": "<p>Norm of a vector</p>",
      "body": "<p>Given v = (x1, x2, ... xN)</p><p>norm is defined as n = x1 <em> x1 + x2 </em> x2 + ... + xN * xN</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 433,
    "codeStart": 445,
    "code": "function vectorNorm () {\n  var result = Scalar.multiplication(data[0], data[0])\n\n  for (var i = 1; i < dimension; i++)\n    result = Scalar.addition(result, Scalar.multiplication(data[i], data[i]))\n\n  return new Scalar(result)\n}\n\nObject.defineProperty(this, 'norm', {get: vectorNorm})\n    }\n\n    inherits(Vector, Element)\n\n    // Static attributes.\n\n    Object.defineProperty(Vector, 'zero', {\nwritable: false,\nvalue: zero\n    })",
    "ctx": {
      "type": "function",
      "name": "vectorNorm",
      "string": "vectorNorm()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 466,
    "codeStart": 470,
    "code": "function crossProduct (right) {\n  var rightData      = toData(right)\n\n        // TODO complete cross product\n}\n\n// Cross product is defined only in dimension 3.\nif (dimension === 3) {\n  Vector.prototype.crossProduct = crossProduct\n  Vector.prototype.cross        = crossProduct\n  Vector.prototype.x            = crossProduct\n}\n\n  // TODO staticRightMultiplication by a matrix",
    "ctx": {
      "type": "function",
      "name": "crossProduct",
      "string": "crossProduct()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 485,
    "codeStart": 489,
    "code": "function scalarProduct (vector1, vector2) {\n  var vectorData1    = toData(vector1),\n      vectorData2    = toData(vector2)\n\n  if (vectorData1.length !== vectorData2.length)\n    throw new TypeError('Vectors has not the same dimension')\n\n  var result = Scalar.multiplication(vectorData1[0], vectorData2[0])\n\n  for (var i = 1; i < dimension; i++) {\n    result = Scalar.addition(result, Scalar.multiplication(vectorData1[i], vectorData2[i]))\n  }\n\n  return result\n}",
    "ctx": {
      "type": "function",
      "name": "scalarProduct",
      "string": "scalarProduct()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 505,
    "codeStart": 509,
    "code": "function vectorScalarProduct (vector) {\n  var result = scalarProduct(this.data, vector)\n\n  return new Scalar(result)\n}\n\nVector.prototype.scalarProduct = vectorScalarProduct",
    "ctx": {
      "type": "function",
      "name": "vectorScalarProduct",
      "string": "vectorScalarProduct()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 517,
    "codeStart": 521,
    "code": "function perScalarProduct (Scalar) {\n  var data       = this.data,\n      ScalarData = toData(Scalar)\n\n  for (var i = 0; i < dimension; i++)\n    data[i] = Scalar.mul(data[i], ScalarData)\n\n  this.data = data\n\n  return this\n}\n\nVector.prototype.perScalarProduct = perScalarProduct",
    "ctx": {
      "type": "function",
      "name": "perScalarProduct",
      "string": "perScalarProduct()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "returns",
        "string": "{Object} Matrix",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Matrix</p>"
      }
    ],
    "description": {
      "full": "<p>Transpose a column-vector to a row-vector</p><p>If you want to multiply at right a vector by a matrix you need to transpose it.</p>",
      "summary": "<p>Transpose a column-vector to a row-vector</p>",
      "body": "<p>If you want to multiply at right a vector by a matrix you need to transpose it.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 535,
    "codeStart": 545,
    "code": "function transpose () {\n  var data   = this.data\n\n  var MatrixSpace = itemsPool.getMatrixSpace()\n\n  var Matrix = MatrixSpace(Scalar)(1, dimension)\n\n  return new Matrix(data)\n}\n\nVector.prototype.transpose = transpose\n\n// Comparison operators.\n\nVector.prototype.equality    = comparison(equality)\nVector.prototype.disequality = comparison(disequality)\n\n// Chainable class methods.\n\nVector.prototype.addition    = nAryMethod(addition, Vector)\nVector.prototype.subtraction = nAryMethod(subtraction, Vector)\nVector.prototype.negation    = unaryMethod(negation, Vector)\n\n// Static operators.\n\nVector.contains    = contains\nVector.disequality = disequality\nVector.equality    = equality\nVector.notContains = notContains\n\nVector.addition    = addition\nVector.subtraction = subtraction\nVector.negation    = negation\n\nVector.scalarProduct = scalarProduct\n\n// Aliases\n\nVector.eq = Vector.equality\nVector.ne = Vector.disequality\n\nVector.equal    = Vector.equality\nVector.notEqual = Vector.disequality\nVector.notEq    = Vector.disequality\n\nVector.add = Vector.addition\nVector.neg = Vector.negation\nVector.sub = Vector.subtraction\n\nVector.prototype.add = Vector.prototype.addition\nVector.prototype.neg = Vector.prototype.negation\nVector.prototype.sub = Vector.prototype.subtraction\n\nVector.prototype.dotProduct = vectorScalarProduct\nVector.prototype.dot        = vectorScalarProduct\n\nreturn Vector\n  }\n}\n\nitemsPool.setVectorSpace(VectorSpace)\n\nmodule.exports = VectorSpace\n\n\nvar inherits = require('inherits')\n\nvar addStaticOperators  = require('./addStaticOperators'),\nbuildFieldOperators = require('./buildFieldOperators'),\nScalar              = require('./Scalar')",
    "ctx": {
      "type": "function",
      "name": "transpose",
      "string": "transpose()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Number} n\n",
        "name": "n",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} n</p>"
      },
      {
        "type": "returns",
        "string": "{Boolean}",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Boolean}</p>"
      }
    ],
    "description": {
      "full": "<p>Check if a number is prime</p>",
      "summary": "<p>Check if a number is prime</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 616,
    "codeStart": 626,
    "code": "function isPrime (n) {\n  if (n === 1) return false\n  if (n === 2) return true\n\n  var m = Math.sqrt(n)\n\n  for (var i = 2; i <= m; i++)\n    if (n % i === 0)\n      return false\n\n  return true\n}",
    "ctx": {
      "type": "function",
      "name": "isPrime",
      "string": "isPrime()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Array} elements\n",
        "name": "elements",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} elements</p>"
      },
      {
        "type": "returns",
        "string": "{Boolean}",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Boolean}</p>"
      }
    ],
    "description": {
      "full": "<p>Check if given elements are unique</p>",
      "summary": "<p>Check if given elements are unique</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 639,
    "codeStart": 649,
    "code": "function unique (elements) {\n  for (var i = 0; i < elements.length - 1; i++)\n    for (var j = i + 1; j < elements.length; j++)\n      if (elements[i] === elements[j])\n        return false\n\n  return true\n}",
    "ctx": {
      "type": "function",
      "name": "unique",
      "string": "unique()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Array|String} elements\n",
        "name": "elements",
        "description": "",
        "types": [
          "Array",
          "String"
        ],
        "typesDescription": "<code>Array</code>|<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array|String} elements</p>"
      },
      {
        "type": "returns",
        "string": "{Object} Cyclic",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Cyclic</p>"
      }
    ],
    "description": {
      "full": "<p>Construct a space isomorphic to Zp: the cyclic group of order p, where p is prime.</p>",
      "summary": "<p>Construct a space isomorphic to Zp: the cyclic group of order p, where p is prime.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 658,
    "codeStart": 668,
    "code": "function buildCyclicSpaceOf (elements) {\n  if ((typeof elements.length !== 'number') || (! isPrime(elements.length)))\n    throw new TypeError(\"elements length must be prime\")\n\n  if ((! unique(elements)))\n    throw new TypeError(\"elements must be unique\")\n\n  var zero = elements[0],\n      one  = elements[1]\n\n  function numOf (element) {\n    return elements.indexOf(element)\n  }\n\n  function addition (element1, element2) {\n    var n = numOf(element1) + numOf(element2)\n\n    n = n % elements.length\n\n    return elements[n]\n  }\n\n  function contains (element) {\n    return elements.indexOf(element) > -1\n  }\n\n  function multiplication (element1, element2) {\n    var n = numOf(element1) * numOf(element2)\n\n    n = n % elements.length\n\n    return elements[n]\n  }\n\n  function inversion (element) {\n    for (var i = 0; i < elements.length; i++)\n      if(elements[1] == multiplication(element, elements[i]))\n\n    return elements[i]\n  }\n\n  function division (element1, element2) {\n    return multiplication(element1, inversion(element2))\n  }\n\n  function negation (element) {\n    var n = numOf(element)\n\n    if (n === 0)\n      return element\n\n    n = elements.length - n\n\n    return elements[n]\n  }\n\n  function equal (element1, element2) {\n    return element1 === element2\n  }\n\n  var operators = {\n    addition      : addition,\n    multiplication: multiplication,\n    negation      : negation,\n    inversion     : inversion,\n    equal         : equal,\n    contains      : contains\n  }\n\n  var field = {\n    one     : one,\n    zero    : zero,\n    operator: operators\n  }\n\n  function Cyclic (data) {\n    Scalar.call(this, field, data)\n  }\n\n  inherits(Cyclic, Scalar)\n\n  addStaticOperators(Cyclic, buildFieldOperators(field))\n\n  return Cyclic\n}\n\nmodule.exports = buildCyclicSpaceOf\n\n\nvar iterateCayleyDickson = require('cayley-dickson'),\n    Scalar               = require('./Scalar')\n\nfunction CayleyDickson (K, iterations) {\n  var Kn = iterateCayleyDickson(K, iterations)\n\n  return Scalar([Kn.zero, Kn.one], Kn)\n}\n\nmodule.exports = CayleyDickson\n\n\nvar toData = require('./toData')",
    "ctx": {
      "type": "function",
      "name": "buildCyclicSpaceOf",
      "string": "buildCyclicSpaceOf()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Function} operator\n",
        "name": "operator",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} operator</p>"
      },
      {
        "type": "returns",
        "string": "{Function} anonymous coerced operator",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>anonymous coerced operator</p>"
      }
    ],
    "description": {
      "full": "<p>Get an operator that coerces arguments to data.</p>",
      "summary": "<p>Get an operator that coerces arguments to data.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 771,
    "codeStart": 781,
    "code": "function coerced (operator) {\n  return function () {\n    return operator.apply(null, [].slice.call(arguments).map(toData))\n  }\n}\n\nmodule.exports = coerced",
    "ctx": {
      "type": "function",
      "name": "coerced",
      "string": "coerced()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Function} operator\n",
        "name": "operator",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} operator</p>"
      },
      {
        "type": "returns",
        "string": "{Function} anonymous accessor",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>anonymous accessor</p>"
      }
    ],
    "description": {
      "full": "<p>Comparison operator for group and ring classes</p>",
      "summary": "<p>Comparison operator for group and ring classes</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 790,
    "codeStart": 800,
    "code": "function comparison (operator) {\n  return function () {\n    return operator.bind(null, this.data).apply(null, arguments)\n  }\n}\n\nmodule.exports = comparison\n\nvar algebraRing = require('algebra-ring')\nvar coerced = require('./coerced')\nvar comparison = require('./comparison')\nvar Element = require('./Element')\nvar inherits = require('inherits')\nvar method = require('./method')\n\nvar nAryMethod = method.nAry\nvar unaryMethod = method.unary",
    "ctx": {
      "type": "function",
      "name": "comparison",
      "string": "comparison()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Array} identity",
        "name": "identity",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} identity</p>"
      },
      {
        "type": "param",
        "string": "{Array} identity[0] a.k.a. zero",
        "name": "identity[0]",
        "description": "<p>a.k.a. zero</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Array} identity[1] a.k.a. uno",
        "name": "identity[1]",
        "description": "<p>a.k.a. uno</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object}   given operator functions",
        "name": "given",
        "description": "<p>operator functions</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Function} given.contains",
        "name": "given.contains",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.contains</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.equality",
        "name": "given.equality",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.equality</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.addition",
        "name": "given.addition",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.addition</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.negation",
        "name": "given.negation",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.negation</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.multiplication",
        "name": "given.multiplication",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.multiplication</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.inversion\n",
        "name": "given.inversion",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.inversion</p>"
      },
      {
        "type": "returns",
        "string": "{Function} Scalar that implements an algebra scalar as a class",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Scalar that implements an algebra scalar as a class</p>"
      }
    ],
    "description": {
      "full": "<p>Create an algebra scalar.</p>",
      "summary": "<p>Create an algebra scalar.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 818,
    "codeStart": 837,
    "code": "function createScalar (identity, given) {\n  var r = algebraRing(identity, given)\n\n  function Scalar (data) {\n    Element.call(this, data, given.contains)\n  }\n\n  inherits(Scalar, Element)\n\n    // TODO questo codice dovrebbe stare in cayley-dickson\n  if (typeof given.conjugation === 'undefined')\n    given.conjugation = function (a) { return a }\n\n  var addition    = coerced(given.addition),\n      contains    = coerced(given.contains),\n      conjugation = coerced(given.conjugation),\n      disequality = coerced(given.disequality),\n      equality    = coerced(given.equality),\n      negation    = coerced(given.negation),\n      notContains = coerced(given.notContains),\n      subtraction = coerced(given.subtraction)\n\n  var multiplication = coerced(given.multiplication),\n      division       = coerced(given.division),\n      inversion      = coerced(given.inversion)\n\n  // Comparison operators.\n\n  Scalar.prototype.equality    = comparison(equality)\n  Scalar.prototype.disequality = comparison(disequality)\n\n  // Chainable class methods.\n\n  Scalar.prototype.addition = function () {\n    var data = addition.bind(null, this.data).apply(null, arguments)\n    return new Scalar(data)\n  }\n\n  Scalar.prototype.subtraction = nAryMethod(subtraction, Scalar)\n  Scalar.prototype.negation    = unaryMethod(negation, Scalar)\n  Scalar.prototype.conjugation = unaryMethod(conjugation, Scalar)\n\n  Scalar.prototype.multiplication = nAryMethod(multiplication, Scalar)\n  Scalar.prototype.division       = nAryMethod(division, Scalar)\n  Scalar.prototype.inversion      = unaryMethod(inversion, Scalar)\n\n  // Static operators.\n\n  Scalar.addition    = addition\n  Scalar.contains    = contains\n  Scalar.conjugation = conjugation\n  Scalar.disequality = disequality\n  Scalar.equality    = equality\n  Scalar.negation    = negation\n  Scalar.notContains = notContains\n  Scalar.subtraction = subtraction\n\n  Scalar.multiplication = multiplication\n  Scalar.division       = division\n  Scalar.inversion      = inversion\n\n  // Aliases.\n\n  Scalar.eq = Scalar.equality\n  Scalar.ne = Scalar.disequality\n\n  Scalar.equal    = Scalar.equality\n  Scalar.notEqual = Scalar.disequality\n  Scalar.notEq    = Scalar.disequality\n\n  Scalar.add = Scalar.addition\n  Scalar.neg = Scalar.negation\n  Scalar.sub = Scalar.subtraction\n\n  Scalar.div = Scalar.division\n  Scalar.inv = Scalar.inversion\n  Scalar.mul = Scalar.multiplication\n\n  Scalar.conj = Scalar.conj\n\n  Scalar.prototype.eq = Scalar.prototype.equality\n  Scalar.prototype.ne = Scalar.prototype.disequality\n\n  Scalar.prototype.equal = Scalar.prototype.equality\n  Scalar.prototype.notEqual = Scalar.prototype.disequality\n  Scalar.prototype.notEq    = Scalar.prototype.disequality\n\n  Scalar.prototype.add = Scalar.prototype.addition\n  Scalar.prototype.neg = Scalar.prototype.negation\n  Scalar.prototype.sub = Scalar.prototype.subtraction\n\n  Scalar.prototype.mul = Scalar.prototype.multiplication\n  Scalar.prototype.div = Scalar.prototype.division\n  Scalar.prototype.inv = Scalar.prototype.inversion\n\n  Scalar.prototype.conj = Scalar.prototype.conjugation\n\n  // Identities.\n\n  Scalar.zero = new Scalar(identity[0])\n  Scalar.one  = new Scalar(identity[1])\n\n  return Scalar\n}\n\nmodule.exports = createScalar\n\n\n// TODO remove this file\n\nvar algebraGroup = require('algebra-group'),\n    coerced      = require('./coerced'),\n    comparison   = require('./comparison'),\n    Element      = require('./Element'),\n    inherits     = require('inherits')",
    "ctx": {
      "type": "function",
      "name": "createScalar",
      "string": "createScalar()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Object} given",
        "name": "given",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} given</p>"
      },
      {
        "type": "param",
        "string": "{*}        given.identity a.k.a neutral element",
        "name": "given.identity",
        "description": "<p>a.k.a neutral element</p>",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Function} given.contains",
        "name": "given.contains",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.contains</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.equality",
        "name": "given.equality",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.equality</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.compositionLaw",
        "name": "given.compositionLaw",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.compositionLaw</p>"
      },
      {
        "type": "param",
        "string": "{Function} given.inversion",
        "name": "given.inversion",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} given.inversion</p>"
      },
      {
        "type": "param",
        "string": "{Object} [naming]",
        "name": "[naming]",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} [naming]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.identity=zero]",
        "name": "[naming.identity=zero]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.identity=zero]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.contains=contains]",
        "name": "[naming.contains=contains]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.contains=contains]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.equality=equality]",
        "name": "[naming.equality=equality]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.equality=equality]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.compositionLaw=addition]",
        "name": "[naming.compositionLaw=addition]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.compositionLaw=addition]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.inversion=negation]",
        "name": "[naming.inversion=negation]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.inversion=negation]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.inverseCompositionLaw=subtraction]",
        "name": "[naming.inverseCompositionLaw=subtraction]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.inverseCompositionLaw=subtraction]</p>"
      },
      {
        "type": "param",
        "string": "{String} [naming.notContains=notContains]\n",
        "name": "[naming.notContains=notContains]",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} [naming.notContains=notContains]</p>"
      },
      {
        "type": "returns",
        "string": "{Function} Group that implements an algebra group as a class",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Group that implements an algebra group as a class</p>"
      }
    ],
    "description": {
      "full": "<p>Create an algebra group.</p>",
      "summary": "<p>Create an algebra group.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 953,
    "codeStart": 976,
    "code": "function group (given, naming) {\n  var g = algebraGroup(given, naming)\n\n  function Group (data) {\n    Element.call(this, data, given.contains)\n  }\n\n  inherits(Group, Element)\n\n  var addition    = coerced(g.addition),\n      contains    = coerced(g.contains),\n      disequality = coerced(g.disequality),\n      equality    = coerced(g.equality),\n      negation    = coerced(g.negation),\n      notContains = coerced(g.notContains),\n      subtraction = coerced(g.subtraction)\n\n  // Comparison operators.\n\n  Group.prototype.equality    = comparison(equality)\n  Group.prototype.disequality = comparison(disequality)\n\n  // Chainable class methods.\n\n  Group.prototype.addition    = nAryMutator(addition)\n  Group.prototype.subtraction = nAryMutator(subtraction)\n  Group.prototype.negation    = unaryMutator(negation)\n\n  // Static operators.\n\n  Group.addition       = addition\n  Group.contains       = contains\n  Group.disequality    = disequality\n  Group.equality       = equality\n  Group.negation       = negation\n  Group.notContains    = notContains\n  Group.subtraction    = subtraction\n\n  // Identity.\n\n  Object.defineProperty(Group, 'zero', {\n    writable: false,\n    value: g.zero\n  })\n\n  // Aliases.\n\n  Group.eq = Group.equality\n  Group.ne = Group.disequality\n\n  Group.equal    = Group.equality\n  Group.notEqual = Group.disequality\n  Group.notEq    = Group.disequality\n\n  Group.add = Group.addition\n  Group.neg = Group.negation\n  Group.sub = Group.subtraction\n\n  Group.prototype.add = Group.prototype.addition\n  Group.prototype.neg = Group.prototype.negation\n  Group.prototype.sub = Group.prototype.subtraction\n\n  return Group\n}\n\nmodule.exports = group\n\n\nfunction itemsPool () {\n  var MatrixSpace,\n      VectorSpace\n\n  function getMatrixSpace () {\n    if (typeof MatrixSpace === 'undefined')\n      throw new Error('MatrixSpace not yet in items pool')\n\n    return MatrixSpace\n  }\n\n  this.getMatrixSpace = getMatrixSpace\n\n  function setMatrixSpace (item) {\n    if (typeof MatrixSpace === 'undefined')\n      MatrixSpace = item\n    else throw new Error('MatrixSpace already in items pool')\n  }\n\n  this.setMatrixSpace = setMatrixSpace\n\n  function getVectorSpace () {\n    if (typeof VectorSpace === 'undefined')\n      throw new Error('VectorSpace not yet in items pool')\n\n    return VectorSpace\n  }\n\n  this.getVectorSpace = getVectorSpace\n\n  function setVectorSpace (item) {\n    if (typeof VectorSpace === 'undefined')\n      VectorSpace = item\n    else throw new Error('VectorSpace already in items pool')\n  }\n\n  this.setVectorSpace = setVectorSpace\n}\n\nmodule.exports = new itemsPool()",
    "ctx": {
      "type": "function",
      "name": "group",
      "string": "group()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Number} i index row",
        "name": "i",
        "description": "<p>index row</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} j index column",
        "name": "j",
        "description": "<p>index column</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} numCols\n",
        "name": "numCols",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numCols</p>"
      },
      {
        "type": "returns",
        "string": "{Number} index",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>index</p>"
      }
    ],
    "description": {
      "full": "<p>Convert a pair of indices to a 1-dimensional index</p>",
      "summary": "<p>Convert a pair of indices to a 1-dimensional index</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1086,
    "codeStart": 1098,
    "code": "function matrixToArrayIndex (i, j, numCols) {\n  return j + i * numCols\n}\n\nmodule.exports = matrixToArrayIndex\n\n\nfunction unaryMethod (operator, Scalar) {\n  return function () {\n    var data = operator(this.data)\n    return new Scalar(data)\n  }\n}\n\nexports.unary = unaryMethod\n\nfunction nAryMethod (operator, Scalar) {\n  return function () {\n    var data = operator.bind(null, this.data).apply(null, arguments)\n    return new Scalar(data)\n  }\n}\n\nexports.nAry = nAryMethod\n\nvar coerced = require('./coerced')\n\nfunction nAry (indices, operator) {\n  var isScalar = ((indices.length === 1) && (indices[0] === 1))\n\n  return function () {\n    var op = coerced(operator)\n\n    if (isScalar) {\n      return op.apply(null, arguments)\n    } else {\n      var first = arguments[0]\n      var rest = [].slice.call(arguments, 1)\n      var dimension = indices.reduce((a, b) => {\n        return a * b\n      }, 1)\n\n      return rest.reduce((a, b) => {\n        var result = []\n\n        for (var i = 0; i < dimension; i++) {\n          result.push(op(a[i], b[i]))\n        }\n\n        return result\n      }, first)\n    }\n  }\n}\n\nmodule.exports = nAry\nvar realField = {\n  zero: 0,\n  one: 1,\n  contains: (a, b) => {\n    // NaN, Infinity and -Infinity are not allowed.\n    return (typeof a === 'number' && isFinite(a))\n  },\n  equality: (a, b) => { return a === b },\n  addition: (a, b) => { return a + b },\n  negation: (a) => { return -a },\n  multiplication: (a, b) => { return a * b },\n  inversion: (a) => { return 1 / a }\n}\n\nmodule.exports = realField\n\nvar isInteger          = require('is-integer'),\n    matrixToArrayIndex = require('./matrixToArrayIndex')",
    "ctx": {
      "type": "function",
      "name": "matrixToArrayIndex",
      "string": "matrixToArrayIndex()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{Object}   scalar",
        "name": "scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object}   scalar</p>"
      },
      {
        "type": "param",
        "string": "{Function} scalar.addition",
        "name": "scalar.addition",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} scalar.addition</p>"
      },
      {
        "type": "param",
        "string": "{Function} scalar.multiplication",
        "name": "scalar.multiplication",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} scalar.multiplication</p>"
      },
      {
        "type": "param",
        "string": "{Array} leftMatrix",
        "name": "leftMatrix",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} leftMatrix</p>"
      },
      {
        "type": "param",
        "string": "{Array} leftNumRows",
        "name": "leftNumRows",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} leftNumRows</p>"
      },
      {
        "type": "param",
        "string": "{Array} rightMatrix",
        "name": "rightMatrix",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} rightMatrix</p>"
      },
      {
        "type": "param",
        "string": "{Array} rightNumCols\n",
        "name": "rightNumCols",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} rightNumCols</p>"
      },
      {
        "type": "returns",
        "string": "{Array} data",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>data</p>"
      }
    ],
    "description": {
      "full": "<p>Multiply two matrices, row by column.</p>",
      "summary": "<p>Multiply two matrices, row by column.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1173,
    "codeStart": 1189,
    "code": "function rowByColumnMultiplication (scalar, leftMatrix, leftNumRows, rightMatrix, rightNumCols) {\n  var leftNumCols  = leftMatrix.length / leftNumRows,\n      rightNumRows = rightMatrix.length / rightNumCols\n\n  if (! isInteger(leftNumCols))\n    throw new TypeError('leftNumCols does not divide leftMatrix.length')\n\n  if (! isInteger(rightNumRows))\n    throw new TypeError('rightNumRows does not divide rightMatrix.length')\n\n  // Check if matrices can be multiplied.\n  if (leftNumCols !== rightNumRows)\n    throw new TypeError('Left num cols != right num rows')\n\n  var commonIndex = leftNumCols,\n      data        = [],\n      rows        = leftNumRows,\n      cols        = rightNumCols\n\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      var leftIndex  = matrixToArrayIndex(i, 0, commonIndex),\n          rightIndex = matrixToArrayIndex(0, j, cols)\n\n      var rightElement = rightMatrix[rightIndex],\n          leftElement  = leftMatrix[leftIndex]\n\n      var element = scalar.multiplication(leftElement, rightElement)\n\n      for (var k = 1; k < commonIndex; k++) {\n        leftIndex = matrixToArrayIndex(i, k, commonIndex)\n        rightIndex = matrixToArrayIndex(k, j, cols)\n\n        rightElement = rightMatrix[rightIndex]\n        leftElement = leftMatrix[leftIndex]\n\n        element = scalar.addition(element, scalar.multiplication(rightElement, leftElement))\n      }\n\n      data.push(element)\n    }\n  }\n\n  return data\n}\n\nmodule.exports = rowByColumnMultiplication\n\nvar nAry = require('./nAry')\nvar tensorProduct = require('tensor-product')",
    "ctx": {
      "type": "function",
      "name": "rowByColumnMultiplication",
      "string": "rowByColumnMultiplication()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array} indices",
        "name": "indices",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} indices</p>"
      },
      {
        "type": "returns",
        "string": "{Function}",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Function}</p>"
      }
    ],
    "description": {
      "full": "<p>Creates a tensor space that is a class representing a tensor.</p>",
      "summary": "<p>Creates a tensor space that is a class representing a tensor.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1240,
    "codeStart": 1247,
    "code": "function tensorSpace (indices) {\n  // If dim equals 1 it is like a vector of dimension 1, that is a scalar.\n  // Only dim greater than 1, represents a varying index  increase order.\n  // A scalar has order 0.\n  // A vector has order 1.\n  // A matrix has order 2.\n  // Order is also called \"rank\" or \"tensor rank\", but, to avoid confusion with\n  // \"matrix rank\" it is better to call it \"order\".\n  const order = indices.filter((dim) => {\n    return dim > 1\n  }).length\n\n  const isScalar = (order === 0)\n\n  return function (ring) {\n    // Create zero.\n    const zero = indices.reduce((result, dim) => {\n      if (isScalar) {\n        return ring.zero\n      } else {\n        for(var i = 0; i < dim; i++) {\n          result.push(ring.zero)\n        }\n\n        return result\n      }\n    }, [])",
    "ctx": {
      "type": "function",
      "name": "tensorSpace",
      "string": "tensorSpace()"
    }
  },
  {
    "tags": [
      {
        "type": "class",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Tensor</p>",
      "summary": "<p>Tensor</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": true,
    "isEvent": false,
    "ignore": false,
    "line": 1275,
    "codeStart": 1281,
    "code": "class Tensor {\n  constructor (data) {\n    this.data = data\n  }\n\n  addition () {\n    var args = [].slice.call(arguments)\n    var operands = [this.data].concat(args)\n\n    var data = Tensor.addition.apply(null, operands)\n\n    return new Tensor(data)\n  }\n\n  add () {\n    var args = [].slice.call(arguments)\n    var operands = [this.data].concat(args)\n\n    var data = Tensor.addition.apply(null, operands)\n\n    return new Tensor(data)\n  }\n\n  subtraction () {\n    var args = [].slice.call(arguments)\n    var operands = [this.data].concat(args)\n\n    var data = Tensor.subtraction.apply(null, operands)\n\n    return new Tensor(data)\n  }\n\n  sub () {\n    var args = [].slice.call(arguments)\n    var operands = [this.data].concat(args)\n\n    var data = Tensor.subtraction.apply(null, operands)\n\n    return new Tensor(data)\n  }\n\n  static equality () {\n    return nAry(indices, ring.equality).apply(null, arguments)\n  }\n\n  static eq () {\n    return nAry(indices, ring.equality).apply(null, arguments)\n  }\n\n  static addition () {\n    return nAry(indices, ring.addition).apply(null, arguments)\n  }\n\n  static add () {\n    return nAry(indices, ring.addition).apply(null, arguments)\n  }\n\n  static subtraction () {\n    return nAry(indices, ring.subtraction).apply(null, arguments)\n  }\n\n  static sub () {\n    return nAry(indices, ring.subtraction).apply(null, arguments)\n  }\n\n  static product (leftData) {\n    return function (rightDim) {\n      return function (rightData) {\n        return tensorProduct(ring.multiplication, indices, rightDim, leftData, rightData)\n      }\n    }\n  }\n}\n\nObject.defineProperty(Tensor, 'zero', {\n  writable: false,\n  value: zero\n})\n\nObject.defineProperty(Tensor, 'order', {\n  writable: false,\n  value: order\n})\n\nreturn Tensor\n  }\n}\n\nmodule.exports = tensorSpace",
    "ctx": {
      "type": "class",
      "constructor": "Tensor",
      "cons": "Tensor",
      "name": "Tensor",
      "extends": "",
      "string": "new Tensor()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private\n",
        "visibility": "private",
        "html": "<p>private</p>"
      },
      {
        "type": "param",
        "string": "{*} arg\n",
        "name": "arg",
        "description": "",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{*} arg</p>"
      },
      {
        "type": "returns",
        "string": "{*} data",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>data</p>"
      }
    ],
    "description": {
      "full": "<p>Extract data attribute, if any, and check it</p>",
      "summary": "<p>Extract data attribute, if any, and check it</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1371,
    "codeStart": 1381,
    "code": "function toData (arg) {\n  var data\n\n  if (typeof arg.data === 'undefined')\n    data = arg\n  else\n    data = arg.data\n\n  if (typeof data === 'undefined')\n    throw new TypeError('No data')\n\n  return data\n}\n\nmodule.exports = toData",
    "ctx": {
      "type": "function",
      "name": "toData",
      "string": "toData()"
    }
  }
]
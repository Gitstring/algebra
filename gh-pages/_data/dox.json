[
  {
    "tags": [],
    "description": {
      "full": "<p>Complex number.</p>",
      "summary": "<p>Complex number.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 67,
    "code": "function Complex (data) {\n  Scalar.call(this, field, data)\n}\n\ninherits(Complex, Scalar)\n\naddStaticOperators(Complex, buildFieldOperators(field))\n\nfunction fieldConjugation (z) {\n  return conjugation(z)\n}\n\nfunction scalarConjugation (z) {\n  this.data = fieldConjugation(this.data)\n\n  return this\n}\n\nComplex.prototype.conjugation = scalarConjugation\nComplex.prototype.conj        = scalarConjugation\n\nComplex.conjugation = fieldConjugation\nComplex.conj        = fieldConjugation\n\nmodule.exports = Complex",
    "ctx": {
      "type": "function",
      "name": "Complex",
      "string": "Complex()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} data",
        "name": "data",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} data</p>"
      },
      {
        "type": "param",
        "string": "{Function} check",
        "name": "check",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} check</p>"
      }
    ],
    "description": {
      "full": "<p>Abstract element</p>",
      "summary": "<p>Abstract element</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 94,
    "codeStart": 102,
    "code": "function Element (data, check) {\n  if (check(data))\n      this.data = data\n    else\n      throw new TypeError(data)\n}\n\nfunction valueOf () {\n  return this.data\n}\n\nElement.prototype.valueOf = valueOf\n\nmodule.exports = Element\n\n\nvar inherits = require('inherits')\n\nvar arrayFrom = require('./arrayFrom')\n  , Element = require('./Element')\n  , toData = require('./toData')",
    "ctx": {
      "type": "function",
      "name": "Element",
      "string": "Element()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} zero",
        "name": "zero",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} zero</p>"
      },
      {
        "type": "param",
        "string": "{Any} one",
        "name": "one",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} one</p>"
      },
      {
        "type": "param",
        "string": "{Object} operators",
        "name": "operators",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} operators</p>"
      }
    ],
    "description": {
      "full": "<p>Algebra field</p>",
      "summary": "<p>Algebra field</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 124,
    "codeStart": 132,
    "code": "function Field (zero, one, operators) {\n  var self = this\n\n  self.zero = zero\n  self.one = one\n\n\n  var addition = operators.addition\n    , multiplication = operators.multiplication\n    , inversion = operators.inversion\n    , equal = operators.equal\n    , negation = operators.negation\n    , contains = operators.contains\n  \n  self.contains = contains\n\n  function subtraction (data1, data2) {\n    return addition(data1, negation(data2))\n  }\n\n  function notEqual (data1, data2) {\n    return (! (operators.equal(data1, data2)))\n  }\n\n  function division (data1, data2) {\n    return multiplication(data1, inversion(data2))\n  }\n\n  function checkIsNotZero (data) {\n    if (equal(zero, data))\n      throw new TypeError(data)\n\n    return data\n  }",
    "ctx": {
      "type": "function",
      "name": "Field",
      "string": "Field()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static addition operator</p>",
      "summary": "<p>Static addition operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 167,
    "codeStart": 171,
    "code": "function fieldAddition () {\n  return arrayFrom(arguments).map(toData).reduce(addition)        \n}\n\nself.addition = fieldAddition",
    "ctx": {
      "type": "function",
      "name": "fieldAddition",
      "string": "fieldAddition()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static subtraction operator</p>",
      "summary": "<p>Static subtraction operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 177,
    "codeStart": 181,
    "code": "function fieldSubtraction () {\n  return arrayFrom(arguments).map(toData).reduce(subtraction)        \n}\n\nself.subtraction = fieldSubtraction",
    "ctx": {
      "type": "function",
      "name": "fieldSubtraction",
      "string": "fieldSubtraction()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static multiplication operator</p>",
      "summary": "<p>Static multiplication operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 187,
    "codeStart": 191,
    "code": "function fieldMultiplication () {\n  return arrayFrom(arguments).map(toData).reduce(multiplication)        \n}\n\nself.multiplication = fieldMultiplication",
    "ctx": {
      "type": "function",
      "name": "fieldMultiplication",
      "string": "fieldMultiplication()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static division operator</p>",
      "summary": "<p>Static division operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 197,
    "codeStart": 201,
    "code": "function fieldDivision () {\n  return arrayFrom(arguments).map(toData).map(checkIsNotZero).reduce(division)        \n}\n\nself.division = fieldDivision",
    "ctx": {
      "type": "function",
      "name": "fieldDivision",
      "string": "fieldDivision()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static inversion operator</p>",
      "summary": "<p>Static inversion operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 207,
    "codeStart": 211,
    "code": "function fieldInversion () {\n  return arrayFrom(arguments).map(toData).map(checkIsNotZero).reduce(inversion)        \n}\n\nself.inversion = fieldInversion",
    "ctx": {
      "type": "function",
      "name": "fieldInversion",
      "string": "fieldInversion()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static equal operator</p>",
      "summary": "<p>Static equal operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 217,
    "codeStart": 221,
    "code": "function fieldEqual () {\n  return arrayFrom(arguments).map(toData).reduce(equal)        \n}\n\nself.equal = fieldEqual",
    "ctx": {
      "type": "function",
      "name": "fieldEqual",
      "string": "fieldEqual()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Static negation operator</p>",
      "summary": "<p>Static negation operator</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 227,
    "codeStart": 231,
    "code": "function fieldNegation () {\n  return operators.negation(toData(arguments[0]))  \n}\n\nself.negation = fieldNegation",
    "ctx": {
      "type": "function",
      "name": "fieldNegation",
      "string": "fieldNegation()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} data\n",
        "name": "data",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} data</p>"
      },
      {
        "type": "return",
        "string": "{Object} this",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>this</p>"
      }
    ],
    "description": {
      "full": "<p>Scalar element</p>",
      "summary": "<p>Scalar element</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 237,
    "codeStart": 246,
    "code": "function Scalar (data) {\n  Element.call(this, data, self.contains)\n}\n\ninherits(Scalar, Element)\n\nfunction scalarAddition () {\n  this.data = fieldAddition(this.data, fieldAddition.apply(null, arguments))\n  \n  return this\n}\n\nScalar.prototype.addition = scalarAddition\nScalar.prototype.add      = scalarAddition\n\nfunction scalarSubtraction () {\n  this.data = fieldSubtraction(this.data, fieldSubtraction.apply(null, arguments))\n  \n  return this\n}\n\nScalar.prototype.subtraction = scalarSubtraction\nScalar.prototype.sub         = scalarSubtraction\n\nfunction scalarMultiplication () {\n  this.data = fieldMultiplication(this.data, fieldMultiplication.apply(null, arguments))\n  \n  return this\n}\n\nScalar.prototype.multiplication = scalarMultiplication\nScalar.prototype.mul = scalarMultiplication\n\nfunction scalarDivision () {\n  this.data = fieldDivision(this.data, fieldDivision.apply(null, arguments))\n  \n  return this\n}\n\nScalar.prototype.division = scalarDivision\nScalar.prototype.div = scalarDivision\n\nfunction scalarInversion () {\n  this.data = fieldInversion(this.data, fieldInversion.apply(null, arguments))\n  \n  return this\n}\n\nScalar.prototype.inversion = scalarInversion\nScalar.prototype.inv       = scalarInversion\n\nfunction scalarEqual () {\n  return fieldEqual(this.data, fieldEqual.apply(null, arguments))\n}\n\nScalar.prototype.equal = scalarEqual\nScalar.prototype.eq = scalarEqual\n\nfunction scalarNegation () {\n  this.data = fieldNegation(this.data)\n  \n  return this\n}\n\nScalar.prototype.negation = scalarNegation\nScalar.prototype.neg = scalarNegation\n\nself.Scalar = Scalar\n}\n\nmodule.exports = Field\n\n\nvar inherits = require('inherits')\n\nvar determinant               = require('./determinant'),\n  getIndices                = require('./getIndices'),\n  rowByColumnMultiplication = require('./rowByColumnMultiplication.js'),\n  Space                     = require('./Space'),\n  toData                    = require('./toData'),\n  VectorSpace               = require('./VectorSpace')",
    "ctx": {
      "type": "function",
      "name": "Scalar",
      "string": "Scalar()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "param",
        "string": "{Number} numRows",
        "name": "numRows",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numRows</p>"
      },
      {
        "type": "param",
        "string": "{Number} numCols",
        "name": "numCols",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numCols</p>"
      }
    ],
    "description": {
      "full": "<p>Space of m x n matrices</p>",
      "summary": "<p>Space of m x n matrices</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 327,
    "codeStart": 335,
    "code": "function MatrixSpace (Scalar) {\n  var self = this",
    "ctx": {
      "type": "function",
      "name": "MatrixSpace",
      "string": "MatrixSpace()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Number} numRows",
        "name": "numRows",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numRows</p>"
      },
      {
        "type": "param",
        "string": "{Number} numCols which is optional: defaults to a square matrix.\n",
        "name": "numCols",
        "description": "<p>which is optional: defaults to a square matrix. </p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Constructor} Matrix",
        "types": [
          "Constructor"
        ],
        "typesDescription": "<a href=\"Constructor.html\">Constructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Matrix</p>"
      }
    ],
    "description": {
      "full": "<p>Dimension</p>",
      "summary": "<p>Dimension</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 338,
    "codeStart": 347,
    "code": "function Dimension (numRows, numCols) {\n  var isSquare = false\n\n  if (typeof numCols === 'undefined') {\n    // numCols defaults to numRows\n    numCols = numRows\n\n    isSquare = true\n  }\n\n  var indices = [numRows, numCols]\n\n  var Element = Space(Scalar)(indices)",
    "ctx": {
      "type": "function",
      "name": "Dimension",
      "string": "Dimension()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 361,
    "codeStart": 365,
    "code": "function Matrix () {\n  Element.apply(this, arguments)",
    "ctx": {
      "type": "function",
      "name": "Matrix",
      "string": "Matrix()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 368,
    "codeStart": 372,
    "code": "function matrixDeterminant () {\n  var det = determinant(Scalar, this.data, numRows)\n\n  return new Scalar(det)\n}\n\nif (isSquare) {\n  Object.defineProperty(this, 'determinant', {get: matrixDeterminant})\n  Object.defineProperty(this, 'det', {get: matrixDeterminant})\n}\n    }\n\n    inherits(Matrix, Element)\n\n    // Static attributes.\n    Matrix.isSquare = isSquare\n    Matrix.numRows  = numRows\n    Matrix.numCols  = numCols",
    "ctx": {
      "type": "function",
      "name": "matrixDeterminant",
      "string": "matrixDeterminant()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 391,
    "codeStart": 394
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 395,
    "codeStart": 399,
    "code": "function matrixAddition (matrix) {\n  this.data = space.addition(this.data, matrix)\n\n  return this\n}\n\nMatrix.prototype.addition = matrixAddition\nMatrix.prototype.add      = matrixAddition",
    "ctx": {
      "type": "function",
      "name": "matrixAddition",
      "string": "matrixAddition()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 408,
    "codeStart": 412,
    "code": "function matrixSubtraction (matrix) {\n  this.data = space.subtraction(this.data, matrix)\n\n  return this\n}\n\nMatrix.prototype.subtraction = matrixSubtraction\nMatrix.prototype.sub         = matrixSubtraction",
    "ctx": {
      "type": "function",
      "name": "matrixSubtraction",
      "string": "matrixSubtraction()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 421,
    "codeStart": 425,
    "code": "function rightMultiplication (right) {\n  var rightData    = toData(right),\n      rightIndices = getIndices(right)\n\n  var rightIsMatrix = rightIndices.length === 2,\n      rightIsVector = rightIndices.length === 1\n\n  // TODO rightIsScalar and use scalarMultiplication\n\n  var rightIsSquare = rightIsMatrix && (rightIndices[0] === rightIndices[1])\n\n  if (rightIsVector)\n    rightIndices.push(1)\n\n  var data = rowByColumnMultiplication(Scalar, this.data, this.indices, rightData, rightIndices)\n\n  // Left multiplication by a square matrix is an inner product,\n  // so the method is a mutator.\n  if (rightIsSquare) {\n    this.data = data\n\n    return this\n  }\n\n  if (rightIsVector) {\n    var Vector = VectorSpace(Scalar)(numRows)\n\n    return new Vector(data)\n  }\n    // TODO if rightIsMatrix return new this(Scalar)(numRows, numCols)(data)\n}\n\nMatrix.prototype.rightMultiplication = rightMultiplication\nMatrix.prototype.rightMul            = rightMultiplication\nMatrix.prototype.multiplication      = rightMultiplication\nMatrix.prototype.mul                 = rightMultiplication",
    "ctx": {
      "type": "function",
      "name": "rightMultiplication",
      "string": "rightMultiplication()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 462,
    "codeStart": 466,
    "code": "function leftMultiplication (leftMatrix) {\n  var leftData    = toData(left),\n      leftIndices = getIndices(left)\n\n  var leftIsMatrix = leftIndices.length === 2,\n      leftIsVector = leftIndices.length === 1\n\n  var leftIsSquare = leftIsMatrix && (leftIndices[0] === leftIndices[1])\n\n  if (leftIsVector)\n    leftIndices.push(1)\n\n  var data = rowByColumnMultiplication(Scalar, leftData, leftIndices, this.data, this.indices)\n\n  // Left multiplication by a square matrix is an inner product,\n  // so the method is a mutator.\n  if (leftIsSquare) {\n    this.data = data\n\n    return this\n  }\n\n  if (leftIsVector) {\n    var Vector = VectorSpace(Scalar)(numCols)\n\n    return new Vector(data)\n  }\n}\n\nMatrix.prototype.leftMultiplication = leftMultiplication\nMatrix.prototype.leftMul            = leftMultiplication\n\nreturn Matrix\n  }\n\n  return Dimension\n}\n\nmodule.exports = MatrixSpace\n\n\nvar inherits = require('inherits')\n\nvar addStaticOperators  = require('./addStaticOperators'),\nbuildFieldOperators = require('./buildFieldOperators'),\nScalar              = require('./Scalar')\n\nvar zero = 0\n  , one  = 1\n\nfunction addition (a, b) { return a + b }\n\nfunction multiplication (a, b) { return a * b }\n\nfunction inversion (a) { return one / a }\n\nfunction negation (a) { return - a }\n\nfunction equal (a, b) { return a === b }\n\nfunction contains (a) { return typeof a === 'number' }\n\nvar operators = {\n  addition      : addition,\n  multiplication: multiplication,\n  negation      : negation,\n  inversion     : inversion,\n  equal         : equal,\n  contains      : contains\n}\n\nvar field = {\n  one     : one,\n  zero    : zero,\n  operator: operators\n}",
    "ctx": {
      "type": "function",
      "name": "leftMultiplication",
      "string": "leftMultiplication()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Real number.</p>",
      "summary": "<p>Real number.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 543,
    "codeStart": 547,
    "code": "function Real (data) {\n  Scalar.call(this, field, data)\n}\n\ninherits(Real, Scalar)\n\naddStaticOperators(Real, buildFieldOperators(field))\n\nmodule.exports = Real\n\n\nvar inherits = require('inherits')\n\nvar buildFieldOperators = require('./buildFieldOperators'),\n    Element             = require('./Element')\n\nvar fieldOperator,\n    one,\n    zero\n\nfunction Scalar (field, data) {\n  fieldOperator = buildFieldOperators(field)\n  one  = field.one\n  zero = field.zero\n\n  Element.call(this, data, field.operator.contains)\n}\n\ninherits(Scalar, Element)\n\nScalar.one  = one\nScalar.zero = zero\n\nfunction scalarAddition () {\n  var fieldAddition = fieldOperator.addition\n\n  this.data = fieldAddition(this.data, fieldAddition.apply(null, arguments))\n\n  return this\n}\n\nScalar.prototype.addition = scalarAddition\nScalar.prototype.add      = scalarAddition\n\nfunction scalarSubtraction () {\n  var fieldSubtraction = fieldOperator.subtraction\n\n  this.data = fieldSubtraction(this.data, fieldSubtraction.apply(null, arguments))\n\n  return this\n}\n\nScalar.prototype.subtraction = scalarSubtraction\nScalar.prototype.sub         = scalarSubtraction\n\nfunction scalarMultiplication () {\n  var fieldMultiplication = fieldOperator.multiplication\n\n  this.data = fieldMultiplication(this.data, fieldMultiplication.apply(null, arguments))\n\n  return this\n}\n\nScalar.prototype.multiplication = scalarMultiplication\nScalar.prototype.mul            = scalarMultiplication\n\nfunction scalarDivision () {\n  var fieldDivision = fieldOperator.division\n\n  this.data = fieldDivision(this.data, fieldDivision.apply(null, arguments))\n\n  return this\n}\n\nScalar.prototype.division = scalarDivision\nScalar.prototype.div      = scalarDivision\n\nfunction scalarInversion () {\n  var fieldInversion = fieldOperator.inversion\n\n  this.data = fieldInversion(this.data)\n\n  return this\n}\n\nScalar.prototype.inversion = scalarInversion\nScalar.prototype.inv       = scalarInversion\n\nfunction scalarEqual () {\n  var fieldEqual = fieldOperator.equal\n\n  return fieldEqual(this.data, fieldEqual.apply(null, arguments))\n}\n\nScalar.prototype.equal = scalarEqual\nScalar.prototype.eq    = scalarEqual\n\nfunction scalarNegation () {\n  var fieldNegation = fieldOperator.negation\n\n  this.data = fieldNegation(this.data)\n\n  return this\n}\n\nScalar.prototype.negation = scalarNegation\nScalar.prototype.neg      = scalarNegation\n\nmodule.exports = Scalar\n\nvar inherits = require('inherits')\n\nvar arrayFrom       = require('./arrayFrom'),\n    AbstractElement = require('./Element'),\n    toData          = require('./toData')\n\nfunction getResult (dimension, operator, dataArg) {\n  var result = dataArg[0]\n\n  for (var i=1; i < dataArg.length; i++) {\n    var data = dataArg[i]\n\n    for (var j=0; j < dimension; j++) {\n      result[j] = operator(result[j], data[j])\n    }\n  }\n\n  return result\n}",
    "ctx": {
      "type": "function",
      "name": "Real",
      "string": "Real()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "param",
        "string": "{Array} indices\n",
        "name": "indices",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} indices</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Abstract multidimensional space</p>",
      "summary": "<p>Abstract multidimensional space</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 677,
    "codeStart": 686,
    "code": "function Space (Scalar) {\n\n  // TODO function Dimension (indices, coindices)\n  function Dimension (indices) {\n\n    var dimension = indices.reduce(function (a, b) { return a * b }, 1)",
    "ctx": {
      "type": "constructor",
      "name": "Space",
      "string": "Space()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 693,
    "codeStart": 697,
    "code": "function spaceAddition () {\n  return getResult(dimension, Scalar.addition, arrayFrom(arguments).map(toData))\n}",
    "ctx": {
      "type": "function",
      "name": "spaceAddition",
      "string": "spaceAddition()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 701,
    "codeStart": 705,
    "code": "function spaceSubtraction () {\n  return getResult(dimension, Scalar.subtraction, arrayFrom(arguments).map(toData))\n}",
    "ctx": {
      "type": "function",
      "name": "spaceSubtraction",
      "string": "spaceSubtraction()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 709,
    "codeStart": 713,
    "code": "function spaceScalarMultiplication (data, scalar) {\n  var result = []\n\n  // Check scalar is ok.\n  var aScalar = [scalar]\n  var scalarOk = aScalar.map(Scalar.contains).map(toData)[0]\n\n  for (var i=0; i<dimension; i++) {\n    var x = Scalar.multiplication(data[i], scalarOk)\n    result.push(x)\n  }\n\n  return result\n}",
    "ctx": {
      "type": "function",
      "name": "spaceScalarMultiplication",
      "string": "spaceScalarMultiplication()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 728,
    "codeStart": 732,
    "code": "function spaceScalarProduct () {\n  var dataMul = getResult(dimension, Scalar.multiplication, arrayFrom(arguments).map(toData))\n\n  var result = dataMul[0]\n\n  for (var i=1; i<dimension; i++) {\n    result = Scalar.addition(result, dataMul[i])\n  }\n\n  return result\n}",
    "ctx": {
      "type": "function",
      "name": "spaceScalarProduct",
      "string": "spaceScalarProduct()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 744,
    "codeStart": 748,
    "code": "function contains (data) {\n  return data.map(Scalar.contains).length === dimension\n}\n\n  // TODO spaceIdentity",
    "ctx": {
      "type": "function",
      "name": "contains",
      "string": "contains()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array} data\n",
        "name": "data",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} data</p>"
      },
      {
        "type": "constructor",
        "string": "",
        "html": ""
      }
    ],
    "description": {
      "full": "<p>Space Element</p>",
      "summary": "<p>Space Element</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 754,
    "codeStart": 762,
    "code": "function Element (data) {\n  AbstractElement.call(this, data, contains)\n\n  Object.defineProperty(this, 'indices', {\n    enumerable: false,\n    value: indices,\n    writable: false\n  })\n}\n\ninherits(Element, AbstractElement)",
    "ctx": {
      "type": "constructor",
      "name": "Element",
      "string": "Element()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array} data1",
        "name": "data1",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} data1</p>"
      },
      {
        "type": "param",
        "string": "{Array} data2\n...",
        "name": "data2",
        "description": "<p>...</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Array} dataN\n",
        "name": "dataN",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} dataN</p>"
      },
      {
        "type": "return",
        "string": "this Element with updated data",
        "types": [
          "hi"
        ],
        "typesDescription": "<a href=\"hi.html\">hi</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Element with updated data</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 774,
    "codeStart": 784,
    "code": "function elementAddition () {\n  this.data = spaceAddition(this.data, spaceAddition.apply(null, arguments))\n\n  return this\n}\n\nElement.prototype.addition = elementAddition\nElement.prototype.add      = elementAddition",
    "ctx": {
      "type": "function",
      "name": "elementAddition",
      "string": "elementAddition()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array} data1",
        "name": "data1",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} data1</p>"
      },
      {
        "type": "param",
        "string": "{Array} data2\n...",
        "name": "data2",
        "description": "<p>...</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Array} dataN\n",
        "name": "dataN",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} dataN</p>"
      },
      {
        "type": "return",
        "string": "this Element with updated data",
        "types": [
          "hi"
        ],
        "typesDescription": "<a href=\"hi.html\">hi</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Element with updated data</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 793,
    "codeStart": 803,
    "code": "function elementSubtraction () {\n  this.data = spaceSubtraction(this.data, spaceSubtraction.apply(null, arguments))\n\n  return this\n}\n\nElement.prototype.subtraction = elementSubtraction\nElement.prototype.sub         = elementSubtraction",
    "ctx": {
      "type": "function",
      "name": "elementSubtraction",
      "string": "elementSubtraction()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Any} scalar\n",
        "name": "scalar",
        "description": "",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Any} scalar</p>"
      },
      {
        "type": "return",
        "string": "this Element with updated data",
        "types": [
          "hi"
        ],
        "typesDescription": "<a href=\"hi.html\">hi</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Element with updated data</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 812,
    "codeStart": 819,
    "code": "function elementScalarMultiplication (scalar) {\n  this.data = spaceScalarMultiplication(this.data, scalar)\n\n  return this\n}\n\nElement.prototype.scalarMultiplication = elementScalarMultiplication\nElement.prototype.scalar               = elementScalarMultiplication\n\n// Static attributes.\nElement.dimension = dimension\nElement.indices   = indices\nElement.Scalar    = Scalar\n\n// Static functions.\nElement.addition = spaceAddition\nElement.add      = spaceAddition\n\nElement.subtraction = spaceSubtraction\nElement.sub         = spaceSubtraction\n\nreturn Element\n  }\n\n  // Static attribute.\n  Dimension.Scalar = Scalar\n\n  return Dimension\n}\n\nmodule.exports = Space\n\n\nvar inherits = require('inherits')\n\nvar Space = require('./Space')",
    "ctx": {
      "type": "function",
      "name": "elementScalarMultiplication",
      "string": "elementScalarMultiplication()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "param",
        "string": "{Array} controvariant indices",
        "name": "controvariant",
        "description": "<p>indices</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Array} covariant indices",
        "name": "covariant",
        "description": "<p>indices</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Space of tensors</p>",
      "summary": "<p>Space of tensors</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 856,
    "codeStart": 864,
    "code": "function TensorSpace (Scalar, controvariant, covariant) {\n  var self = this\n\n  var indices = controvariant.concat(covariant)\n\n  var type = [controvariant.length, covariant.length]\n  self.type = type\n\n  var space = new Space(Scalar, indices)\n\n  self.addition = space.addition\n  self.subtraction = space.subtraction\n\n  function Tensor (data) {\n    space.Element.call(this, data)\n  }\n\n\n inherits(Tensor, space.Element)\n\n  self.Tensor = Tensor\n}\n\ninherits(TensorSpace, Space)\n\nmodule.exports = TensorSpace\n\n\nvar inherits = require('inherits')\n\nvar Space = require('./Space')",
    "ctx": {
      "type": "function",
      "name": "TensorSpace",
      "string": "TensorSpace()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar\n",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "return",
        "string": "{Function} Dimension",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Dimension</p>"
      }
    ],
    "description": {
      "full": "<p>Space of vectors</p><pre><code>var V = VectorSpace(R)(2)\n\nvar v = new V([1, 2])\n</code></pre>",
      "summary": "<p>Space of vectors</p>",
      "body": "<pre><code>var V = VectorSpace(R)(2)\n\nvar v = new V([1, 2])\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 896,
    "codeStart": 910,
    "code": "function VectorSpace (Scalar) {",
    "ctx": {
      "type": "function",
      "name": "VectorSpace",
      "string": "VectorSpace()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Number} dimension\n",
        "name": "dimension",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} dimension</p>"
      },
      {
        "type": "return",
        "string": "{Constructor} Vector",
        "types": [
          "Constructor"
        ],
        "typesDescription": "<a href=\"Constructor.html\">Constructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Vector</p>"
      }
    ],
    "description": {
      "full": "<p>Dimension</p>",
      "summary": "<p>Dimension</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 912,
    "codeStart": 920,
    "code": "function Dimension (dimension) {\n  var Element = Space(Scalar)([dimension])\n\n  function Vector () {\n    Element.apply(this, arguments)\n\n    var data = this.data",
    "ctx": {
      "type": "function",
      "name": "Dimension",
      "string": "Dimension()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "string": "{Scalar} result",
        "types": [
          "Scalar"
        ],
        "typesDescription": "<a href=\"Scalar.html\">Scalar</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>result</p>"
      }
    ],
    "description": {
      "full": "<p>Norm of a vector</p><p>Given v = (x1, x2, ... xN)</p><p>norm is defined as n = x1 <em> x1 + x2 </em> x2 + ... + xN * xN</p>",
      "summary": "<p>Norm of a vector</p>",
      "body": "<p>Given v = (x1, x2, ... xN)</p><p>norm is defined as n = x1 <em> x1 + x2 </em> x2 + ... + xN * xN</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 928,
    "codeStart": 938,
    "code": "function vectorNorm () {\n  var result = Scalar.multiplication(data[0], data[0])\n\n  for (var i=1; i<dimension; i++) {\n    result = Scalar.addition(result, Scalar.multiplication(data[i], data[i]))\n  }\n\n  return new Scalar(result)\n}\n\nObject.defineProperty(this, 'norm', {get: vectorNorm})\n    }\n\n    inherits(Vector, Element)\n\n    // TODO da mettere in metodo tipo addStaticOperators\n    Vector.addition    = Element.addition\n    Vector.add         = Element.addition\n    Vector.subtraction = Element.subtraction\n    Vector.sub         = Element.subtraction\n\n    return Vector\n  }\n\n  return Dimension\n}\n\nmodule.exports = VectorSpace",
    "ctx": {
      "type": "function",
      "name": "vectorNorm",
      "string": "vectorNorm()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar class",
        "name": "Scalar",
        "description": "<p>class</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} field",
        "name": "field",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} field</p>"
      }
    ],
    "description": {
      "full": "<p>Add field operators to Scalar as static methods</p>",
      "summary": "<p>Add field operators to Scalar as static methods</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 968,
    "codeStart": 975,
    "code": "function addStaticOperators (Scalar, field) {\n  Scalar.addition       = field.addition\n  Scalar.add            = field.addition\n\n  Scalar.subtraction    = field.subtraction\n  Scalar.sub            = field.subtraction\n\n  Scalar.multiplication = field.multiplication\n  Scalar.mul            = field.multiplication\n\n  Scalar.division       = field.division\n  Scalar.div            = field.division\n\n  Scalar.negation       = field.negation\n  Scalar.neg            = field.negation\n\n  Scalar.inversion      = field.inversion\n  Scalar.inv            = field.inversion\n\n  Scalar.equal          = field.equal\n  Scalar.eq             = field.equal\n\n  Scalar.contains       = field.contains\n}\n\nmodule.exports = addStaticOperators\n\n\nvar matrixToArrayIndex = require('./matrixToArrayIndex')",
    "ctx": {
      "type": "function",
      "name": "addStaticOperators",
      "string": "addStaticOperators()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array} data",
        "name": "data",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} data</p>"
      },
      {
        "type": "param",
        "string": "{Number} numRows",
        "name": "numRows",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numRows</p>"
      },
      {
        "type": "param",
        "string": "{Number} numCols",
        "name": "numCols",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numCols</p>"
      },
      {
        "type": "param",
        "string": "{Number} row",
        "name": "row",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} row</p>"
      },
      {
        "type": "param",
        "string": "{Number} col\n",
        "name": "col",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} col</p>"
      },
      {
        "type": "return",
        "string": "{Array} adjoint",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>adjoint</p>"
      }
    ],
    "description": {
      "full": "<p>Compute the adjoint of a matrix</p>",
      "summary": "<p>Compute the adjoint of a matrix</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1005,
    "codeStart": 1017,
    "code": "function adjointMatrix (data, numRows, numCols, row, col) {\n  var adjoint = []\n\n  for (var i = 0; i < numRows; i++) {\n    for (var j = 0; j < numCols; j++) {\n      if ((i !== row) && (j !== col)) {\n        var index = matrixToArrayIndex(i, j, numCols)\n\n        adjoint.push(data[index])\n      }\n    }\n  }\n\n  return adjoint\n}\n\nmodule.exports = adjointMatrix",
    "ctx": {
      "type": "function",
      "name": "adjointMatrix",
      "string": "adjointMatrix()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} arguments of a function\n",
        "name": "arguments",
        "description": "<p>of a function </p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{Array} array of arguments",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>array of arguments</p>"
      }
    ],
    "description": {
      "full": "<p>Convert arguments to array</p><pre><code>function () {\n  console.log(typeof arguments) // object\n\n  var args = arrayFrom(arguments)\n\n  console.log(typeof args) // array\n}\n</code></pre>",
      "summary": "<p>Convert arguments to array</p>",
      "body": "<pre><code>function () {\n  console.log(typeof arguments) // object\n\n  var args = arrayFrom(arguments)\n\n  console.log(typeof args) // array\n}\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1036,
    "codeStart": 1054,
    "code": "function arrayFrom () {\n  return (function arraySlice0 () {\n    return Array.prototype.slice.call(arguments, 0)\n  }).apply(null, arguments[0])\n}\n\nmodule.exports = arrayFrom\n\n\nvar inherits = require('inherits')\n\nvar addStaticOperators  = require('./addStaticOperators'),\n    buildFieldOperators = require('./buildFieldOperators'),\n    Scalar              = require('./Scalar')\n\nfunction isPrime (n) {\n  if (n === 1) return false\n  if (n === 2) return true\n\n  var m = Math.sqrt(n)\n\n  for (var i = 2; i <= m; i++)\n    if (n % i === 0)\n      return false\n\n  return true\n}\n\nfunction unique (elements) {\n  for (var i = 0; i < elements.length - 1; i++)\n    for (var j = i + 1; j < elements.length; j++)\n      if (elements[i] === elements[j])\n        return false\n\n  return true\n}",
    "ctx": {
      "type": "function",
      "name": "arrayFrom",
      "string": "arrayFrom()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array|String} elements\n",
        "name": "elements",
        "description": "",
        "types": [
          "Array",
          "String"
        ],
        "typesDescription": "<code>Array</code>|<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array|String} elements</p>"
      },
      {
        "type": "return",
        "string": "{Object} Cyclic",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>Cyclic</p>"
      }
    ],
    "description": {
      "full": "<p>Construct a space isomorphic to Zp: the cyclic group of order p, where p is prime.</p>",
      "summary": "<p>Construct a space isomorphic to Zp: the cyclic group of order p, where p is prime.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1091,
    "codeStart": 1099,
    "code": "function buildCyclicSpaceOf (elements) {\n  if ((typeof elements.length !== 'number') || (! isPrime(elements.length)))\n    throw new TypeError(\"elements length must be prime\")\n\n  if ((! unique(elements)))\n    throw new TypeError(\"elements must be unique\")\n\n  var zero = elements[0],\n      one  = elements[1]\n\n  function numOf (element) {\n    return elements.indexOf(element)\n  }\n\n  function addition (element1, element2) {\n    var n = numOf(element1) + numOf(element2)\n\n    n = n % elements.length\n\n    return elements[n]\n  }\n\n  function contains (element) {\n    return elements.indexOf(element) > -1\n  }\n\n  function multiplication (element1, element2) {\n    var n = numOf(element1) * numOf(element2)\n\n    n = n % elements.length\n\n    return elements[n]\n  }\n\n  function inversion (element) {\n    for (var i = 0; i < elements.length; i++)\n      if(elements[1] == multiplication(element, elements[i]))\n\n    return elements[i]\n  }\n\n  function division (element1, element2) {\n    return multiplication(element1, inversion(element2))\n  }\n\n  function negation (element) {\n    var n = numOf(element)\n\n    if (n === 0)\n      return element\n\n    n = elements.length - n\n\n    return elements[n]\n  }\n\n  function equal (element1, element2) {\n    return element1 === element2\n  }\n\n  var operators = {\n    addition      : addition,\n    multiplication: multiplication,\n    negation      : negation,\n    inversion     : inversion,\n    equal         : equal,\n    contains      : contains\n  }\n\n  var field = {\n    one     : one,\n    zero    : zero,\n    operator: operators\n  }",
    "ctx": {
      "type": "function",
      "name": "buildCyclicSpaceOf",
      "string": "buildCyclicSpaceOf()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Cyclic element.</p>",
      "summary": "<p>Cyclic element.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1174,
    "codeStart": 1178,
    "code": "function Cyclic (data) {\n  Scalar.call(this, field, data)\n}\n\ninherits(Cyclic, Scalar)\n\naddStaticOperators(Cyclic, buildFieldOperators(field))\n\nreturn Cyclic\n}\n\nmodule.exports = buildCyclicSpaceOf\n\n\nvar arrayFrom = require('./arrayFrom'),\n  toData    = require('./toData')\n\nfunction buildFieldOperators (field) {\n\nvar one  = field.one,\n    zero = field.zero,\n    addition       = field.operator.addition,\n    multiplication = field.operator.multiplication,\n    inversion      = field.operator.inversion,\n    equal          = field.operator.equal,\n    negation       = field.operator.negation\n\nvar operators = {\n  contains: field.operator.contains\n}\n\nfunction subtraction (data1, data2) {\n  return addition(data1, negation(data2))\n}\n\nfunction notEqual (data1, data2) {\n  return (! (equal(data1, data2)))\n}\n\nfunction division (data1, data2) {\n  return multiplication(data1, inversion(data2))\n}\n\nfunction checkIsNotZero (data) {\n  if (equal(zero, data))\n    throw new TypeError(data)\n\n  return data\n}\n\nfunction fieldAddition () {\n  return arrayFrom(arguments).map(toData).reduce(addition)\n}\n\noperators.addition = fieldAddition\n\nfunction fieldSubtraction () {\n  return arrayFrom(arguments).map(toData).reduce(subtraction)\n}\n\noperators.subtraction = fieldSubtraction\n\nfunction fieldMultiplication () {\n  return arrayFrom(arguments).map(toData).reduce(multiplication)\n}\n\noperators.multiplication = fieldMultiplication\n\nfunction fieldDivision () {\n  return arrayFrom(arguments).map(toData).map(checkIsNotZero).reduce(division)\n}\n\noperators.division = fieldDivision\n\nfunction fieldInversion () {\n  return inversion(toData(arguments[0]))\n}\n\noperators.inversion = fieldInversion\n\nfunction fieldEqual () {\n  return arrayFrom(arguments).map(toData).reduce(equal)\n}\n\noperators.equal = fieldEqual\n\nfunction fieldNegation () {\n  return negation(toData(arguments[0]))\n}\n\noperators.negation = fieldNegation\n\nreturn operators\n}\n\nmodule.exports = buildFieldOperators\n\n\nvar adjointMatrix = require('./adjointMatrix')\n, matrixToArrayIndex = require('./matrixToArrayIndex')",
    "ctx": {
      "type": "function",
      "name": "Cyclic",
      "string": "Cyclic()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "param",
        "string": "{Array} data",
        "name": "data",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} data</p>"
      },
      {
        "type": "param",
        "string": "{Number} order\n",
        "name": "order",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} order</p>"
      },
      {
        "type": "return",
        "string": "{Any} det",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>det</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1279,
    "codeStart": 1288,
    "code": "function determinant (Scalar, data, order) {\n  var adjointData,\n      adjointDeterminant,\n      det,\n      startingCol,\n      startingRow,\n      index\n\n  if (order === 2) {\n    det = Scalar.subtraction(Scalar.multiplication(data[0], data[3]), Scalar.multiplication(data[2], data[1]))\n\n    return det\n  }\n\n  // TODO choose best row or column to start from, i.e. the one with more zeros\n  // by now we start from first row, and walk by column\n  startingCol = 0\n  startingRow = 0\n\n  index = matrixToArrayIndex(startingRow, startingCol, order)\n\n  adjointData = adjointMatrix(data, order, order, startingRow, startingCol)\n  adjointDeterminant = determinant(Scalar, adjointData, order - 1)\n\n  det = Scalar.multiplication(data[index], adjointDeterminant)\n\n  for (var col = 1; col < order; col++) {\n    adjointData = adjointMatrix(data, order, order, startingRow, col)\n\n    adjointDeterminant = determinant(Scalar, adjointData, order - 1)\n\n    index = matrixToArrayIndex(startingRow, col, order)\n\n    det = Scalar.addition(det, Scalar.multiplication(data[index], adjointDeterminant))\n  }\n\n  return det\n}\n\nmodule.exports = determinant\n\n\nvar toData = require('./toData')",
    "ctx": {
      "type": "function",
      "name": "determinant",
      "string": "determinant()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array|Any} arg\n",
        "name": "arg",
        "description": "",
        "types": [
          "Array",
          "Any"
        ],
        "typesDescription": "<code>Array</code>|<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array|Any} arg</p>"
      },
      {
        "type": "return",
        "string": "{Array} indices",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>indices</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1332,
    "codeStart": 1340,
    "code": "function getIndices (arg) {\n  var indices\n\n  if (typeof arg.indices === 'undefined') {\n// TODO\n//   var data = toData(arg)\n//\n//   if (typeof data === 'array') {\n//     // TODO recursion into data if it is a multidimensional array\n//     indices = [data.length]\n//   }\n//   else {\n//     indices = [1]\n//   }\n  }\n  else {\n    indices = arg.indices\n  }\n\n  if (typeof indices === 'undefined')\n    throw new TypeError('No indices')\n\n  return indices\n}\n\nmodule.exports = getIndices\n\n\n// TODO usa le string ℝ ℂ ℍ\n// usa anche ratio, lib per i numueri razionali\n\nrequire('strict-mode')(function () {\n  exports.Field       = require('./Field')\n  exports.Space       = require('./Space')\n  exports.VectorSpace = require('./VectorSpace')\n  exports.MatrixSpace = require('./MatrixSpace')\n//  exports.TensorSpace = require('./TensorSpace')\n\n  exports.Real    = require('./Real')\n  exports.Complex = require('./Complex')\n\n  exports.buildCyclicSpaceOf = require('./buildCyclicSpaceOf')\n})\n\n\nvar multiDimensionalArrayIndex = require('./multiDimensionalArrayIndex')",
    "ctx": {
      "type": "function",
      "name": "getIndices",
      "string": "getIndices()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Number} i row",
        "name": "i",
        "description": "<p>row</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} j column",
        "name": "j",
        "description": "<p>column</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} numberOfColumns\n",
        "name": "numberOfColumns",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} numberOfColumns</p>"
      },
      {
        "type": "return",
        "string": "{Number} index",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>index</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1387,
    "codeStart": 1396,
    "code": "function matrixToArrayIndex(i, j, numberOfColumns) {\n  var index = multiDimensionalArrayIndex([numberOfColumns, numberOfColumns], [i, j])\n\n  return index\n}\n\nmodule.exports = matrixToArrayIndex",
    "ctx": {
      "type": "function",
      "name": "matrixToArrayIndex",
      "string": "matrixToArrayIndex()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Array} dimensions",
        "name": "dimensions",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} dimensions</p>"
      },
      {
        "type": "param",
        "string": "{Array} indices\n",
        "name": "indices",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} indices</p>"
      },
      {
        "type": "return",
        "string": "{Number} index",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>index</p>"
      }
    ],
    "description": {
      "full": "<p>Compute index of multi dim array</p>",
      "summary": "<p>Compute index of multi dim array</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1405,
    "codeStart": 1414,
    "code": "function multiDimensionalArrayIndex(dimensions, indices) {\n  var l = dimensions.length - 1\n    , index = indices[l]\n    , factor\n\n  if (dimensions.length > 1) {\n    factor = dimensions[l - 1]\n\n    index += factor * indices[l - 1]\n  }\n\n  for (var i = 2; i < dimensions.length; i++) {\n    factor *= dimensions[l - i + 1]\n\n    index += factor * indices[l - i]\n  }\n\n  // Given\n  //\n  // dimensions d_1, d_2, d_3 .. d_n\n  // and\n  // indices i_1, i_2, i_3 .. i_n\n  //\n  // index is computed by formula\n  // index = i_n + i_(n-1) * d_n + i_(n-2) * d_n * d_(n-1) + ... + i_2 * d_n * d_(n-1) * ... * d_3 + i_1 * d_n * ... * d_2\n  return index\n}\n\nmodule.exports = multiDimensionalArrayIndex\n\n\nvar matrixToArrayIndex = require('./matrixToArrayIndex')",
    "ctx": {
      "type": "function",
      "name": "multiDimensionalArrayIndex",
      "string": "multiDimensionalArrayIndex()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} Scalar",
        "name": "Scalar",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} Scalar</p>"
      },
      {
        "type": "param",
        "string": "{Array} leftMatrix",
        "name": "leftMatrix",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} leftMatrix</p>"
      },
      {
        "type": "param",
        "string": "{Array} leftIndices",
        "name": "leftIndices",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} leftIndices</p>"
      },
      {
        "type": "param",
        "string": "{Array} rightMatrix",
        "name": "rightMatrix",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} rightMatrix</p>"
      },
      {
        "type": "param",
        "string": "{Array} rightIndices\n",
        "name": "rightIndices",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} rightIndices</p>"
      },
      {
        "type": "return",
        "string": "{Array} data",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>data</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1447,
    "codeStart": 1458,
    "code": "function rowByColumnMultiplication (Scalar, leftMatrix, leftIndices, rightMatrix, rightIndices) {\n  var data = []\n\n  // Check if matrix can be multiplied\n  if (leftIndices[1] !== rightIndices[0])\n    throw new TypeError('Left num cols != right num rows')\n\n  var commonIndex = leftIndices[1]\n\n  var rows = leftIndices[0]\n  var cols = rightIndices[1]\n\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      var element\n        , leftIndex\n        , rightIndex\n        , rightElement\n        , leftElement\n\n      leftIndex = matrixToArrayIndex(i, 0, commonIndex)\n      rightIndex = matrixToArrayIndex(0, j, cols)\n\n      rightElement = rightMatrix[rightIndex]\n      leftElement = leftMatrix[leftIndex]\n\n      element = Scalar.multiplication(leftElement, rightElement)\n\n      for (var k = 1; k < commonIndex; k++) {\n        leftIndex = matrixToArrayIndex(i, k, commonIndex)\n        rightIndex = matrixToArrayIndex(k, j, cols)\n\n        rightElement = rightMatrix[rightIndex]\n        leftElement = leftMatrix[leftIndex]\n\n        element = Scalar.addition(element, Scalar.multiplication(rightElement, leftElement))\n      }\n\n      data.push(element)\n    }\n  }\n\n  return data\n}\n\nmodule.exports = rowByColumnMultiplication",
    "ctx": {
      "type": "function",
      "name": "rowByColumnMultiplication",
      "string": "rowByColumnMultiplication()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object|Any} arg\n",
        "name": "arg",
        "description": "",
        "types": [
          "Object",
          "Any"
        ],
        "typesDescription": "<code>Object</code>|<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object|Any} arg</p>"
      },
      {
        "type": "return",
        "string": "{Any} data",
        "types": [
          "Any"
        ],
        "typesDescription": "<a href=\"Any.html\">Any</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>data</p>"
      }
    ],
    "description": {
      "full": "<p>Extract data attribute, if any, and check it</p>",
      "summary": "<p>Extract data attribute, if any, and check it</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1506,
    "codeStart": 1514,
    "code": "function toData (arg) {\n  var data\n\n  if (typeof arg.data === 'undefined')\n    data = arg\n  else\n    data = arg.data\n\n  if (typeof data === 'undefined')\n    throw new TypeError('No data')\n\n  return data\n}\n\nmodule.exports = toData",
    "ctx": {
      "type": "function",
      "name": "toData",
      "string": "toData()"
    }
  }
]